@model Surya.India.Model.Models.Size

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("Post", "Size", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m=>m.SizeId)
    <div class="panel panel-default">
        <div class="panel panel-heading">
            <h3>
                <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Size</span>
                <input type="submit" value="Save" class="btn btn-primary right" id="submit" style="width: 90px; background-color: #2980b9" />
            </h3>
            <hr style="margin-top:0px;margin-bottom:0px" />

            <div class="panel-info">
                <h4 style="padding:5px 0 0 0;margin:0px">
                    @Html.ActionLink(" ", " ", " ", null, new { @class = "glyphicon glyphicon-refresh toolbar", @title = "Refresh Page", @data_toggle = "tooltip", @id = "RefreshPage" })
                    @Html.ActionLink(" ", "Create", "Size", null, new { @class = "glyphicon glyphicon-plus toolbar", @title = "Add New", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "History", "Size", null, new { @class = "glyphicon glyphicon-user toolbar", @title = "History", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "Print", "Size", null, new { @class = "glyphicon glyphicon-print toolbar", @title = "Print", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "PrevPage", "Size", new { id = @Model.SizeId }, new { @class = "glyphicon glyphicon-arrow-left toolbar", @title = "Prev Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "NextPage", "Size", new { id = @Model.SizeId }, new { @class = "glyphicon glyphicon-arrow-right toolbar", @title = "Next Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "Index", "Size", null, new { @class = "glyphicon glyphicon-list toolbar right", @title = "List", @data_toggle = "tooltip" })

                </h4>
            </div>
        </div>
        <div class="panel panel-info" style="padding-left:15px">
            <div class="form-horizontal">

                @Html.ValidationSummary(true)

                <div class="row">
                    <h4 class="col-md-12 black" style="margin-top:15px">
                        <span class="glyphicon glyphicon-align-justify"></span>
                        1.Size Details
                    </h4> 
                    <div>


                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.SizeName, "Size Name", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.SizeName, null, new { @class = "form-control col-xs-6 required" })
                                        @Html.ValidationMessageFor(m=>m.SizeName)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.ProductShapeId, "Shape", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.DropDownListFor(model => model.ProductShapeId, new SelectList(ViewBag.ProductShapeList as System.Collections.IEnumerable, "ProductShapeId", "ProductShapeName"), new { @class = "form-control col-xs-6 height required" })
                                        @Html.ValidationMessageFor(m => m.ProductShapeId)
                                    </div>
                                </div>
                            </div>

                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.UnitId, "Unit", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.DropDownListFor(model => model.UnitId, new SelectList(ViewBag.UnitList as System.Collections.IEnumerable, "UnitId", "UnitName"),string.Empty, new { @class = "form-control col-xs-6 height required" })
                                        @Html.ValidationMessageFor(m => m.UnitId)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.IsActive, "Is Active", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6" style=" padding-top:4px">
                                        @Html.CheckBoxFor(m => m.IsActive, new { @class = "checkbox col-xs-1" })
                                        @Html.ValidationMessageFor(model => model.IsActive)
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
                <hr />
                <div class="row">
                    <h4 class="col-md-12 black" style="margin-top:15px">
                        <span class="glyphicon glyphicon-align-justify"></span>
                        2.Size Specification
                    </h4> 
                <div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Length, "Length", new { @class = "control-label col-xs-4" })
                                <div class="col-xs-6">
                                    @Html.TextBoxFor(model => model.Length, null, new { @class = "form-control col-xs-6 " })
                                    @Html.ValidationMessageFor(m => m.Length)
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.LengthFraction, "Length Fraction", new { @class = "control-label col-xs-4" })
                                <div class="col-xs-6">
                                    @Html.TextBoxFor(model => model.LengthFraction, null, new { @class = "form-control col-xs-6 " })
                                    @Html.ValidationMessageFor(m => m.LengthFraction)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Width, "Width", new { @class = "control-label col-xs-4" })
                                <div class="col-xs-6">
                                    @Html.TextBoxFor(model => model.Width, null, new { @class = "form-control col-xs-6 " })
                                    @Html.ValidationMessageFor(m => m.Width)
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.WidthFraction, "Width Fraction", new { @class = "control-label col-xs-4" })
                                <div class="col-xs-6">
                                    @Html.TextBoxFor(model => model.WidthFraction, null, new { @class = "form-control col-xs-6 " })
                                    @Html.ValidationMessageFor(m => m.WidthFraction)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Height, "Height", new { @class = "control-label col-xs-4" })
                                <div class="col-xs-6">
                                    @Html.TextBoxFor(model => model.Height, null, new { @class = "form-control col-xs-6 " })
                                    @Html.ValidationMessageFor(m => m.Height)
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.HeightFraction, "Height Fraction", new { @class = "control-label col-xs-4" })
                                <div class="col-xs-6">
                                    @Html.TextBoxFor(model => model.HeightFraction, null, new { @class = "form-control col-xs-6" })
                                    @Html.ValidationMessageFor(m => m.HeightFraction)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Area, "Area", new { @class = "control-label col-xs-4 strong", @style = "font-weight:bolder ! important;color:black ! important;font-size:1.3em! important" })
                                <div class="col-xs-6">
                                    @Html.TextBoxFor(model => model.Area, null, new { @class = "form-control col-xs-6 strong", @style = "font-weight:bolder;color:black ! important;font-size:1.3em! important" })
                                    @Html.ValidationMessageFor(m => m.Area)
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Perimeter, "Perimeter", new { @class = "control-label col-xs-4 strong", @style = "font-weight:bolder ! important;color:black ! important;font-size:1.3em! important" })
                                <div class="col-xs-6">
                                    @Html.TextBoxFor(model => model.Perimeter, null, new { @class = "form-control col-xs-6 strong", @style = "font-weight:bolder;color:black ! important;font-size:1.3em! important" })
                                    @Html.ValidationMessageFor(m => m.Perimeter)
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            </div>
        </div>
    </div>
}
<script type="text/javascript">

   var IsSaved=false;
    var ValidationCount=0;
    var FractionUnit=0;
    var LengthA=0;
    var WidthA=0;
    $('form').submit(function(event){

        if(!IsSaved)
        {
            if(!ValidateData())
            {
                return false;
            }
            IsSaved=true;
            return IsSaved;
        }
        else
        {
            return false;
        }


    });


    function ValidateData() {
        var DocId=@Model.SizeId;
        var TempValue;
        var ValidationMessage="";
        


        //Checking for dulicate key value
        if(DocId<=0)
        {
            TempValue= $('#SizeName').DuplicateCheckForCreate({ name: 'Size', value: $('#SizeName').val(), doctype: 0 });
            if (TempValue){ ValidationMessage=$('#SizeName').val() + " already exist <br />";}
        }
        else
        {
            test = $('#SizeName').DuplicateCheckForEdit({ name: 'Size', value: $('#SizeName').val(), doctype: 0,headerId:DocId });
            if (TempValue) {ValidationMessage+=$('#SizeName').val() + " already exist <br />";}
        }
        if(TempValue)
        {
            if($('#validationerrormsg').length==0){
                $('.panel-info').filter(':eq(1)').before('<div class="alert alert-danger" role="alert" id="validationerrormsg">'+ValidationMessage+'</div>');}
            else
            {
                $('#validationerrormsg').html(ValidationMessage);
            }
        }
        return  (ValidationMessage=="");

    }


    $('#UnitId').change(function(){
        var unitid=$('#UnitId').val();
       
        $.ajax({
            cache: false,
            type: "POST",
            url: "@(Url.Action("GetUnitFraction"))",
            data: { id: unitid },
            success: function (data) {                
                FractionUnit=data;  
                calculateLenghtWidth();
        },
        })       

    })

    $('#Length,#LengthFraction,#Width,#WidthFraction,#Height,#HeightFraction').keyup(calculateLenghtWidth);

    function calculateLenghtWidth(){
        var length=($('#Length').val()==null||$('#Length').val()=="")?0:(parseInt($('#Length').val()));
        var lengthfraction=(FractionUnit==0)?0:($('#LengthFraction').val()==null||$('#LengthFraction').val()=="")?0:(parseInt($('#LengthFraction').val())/FractionUnit);
        LengthA=length+lengthfraction;

        var width=($('#Width').val()==null||$('#Width').val()=="")?0:(parseInt($('#Width').val()));
        var widthfraction=(FractionUnit==0)?0:($('#WidthFraction').val()==null||$('#WidthFraction').val()=="")?0:(parseInt($('#WidthFraction').val())/FractionUnit);
        WidthA=width+widthfraction;

        calculateAreaPerimeter();
    }

    function calculateAreaPerimeter(){
        if($('#ProductShapeId option:selected').text()=="Circle")
        {
            $("#Area").val(((3.141*LengthA*LengthA).toFixed(2)));        
            $('#Perimeter').val(((2*3.131*LengthA).toFixed(2)));
        }
        else if($('#ProductShapeId option:selected').text()=="Rectangle")
        {
            $("#Area").val((LengthA*WidthA).toFixed(2));
            $('#Perimeter').val((2*(LengthA+WidthA)).toFixed(2));
        }
        else if($('#ProductShapeId option:selected').text()=="Square")
        {
            $('#Area').val((LengthA*LengthA).toFixed(2));
            $('#Perimeter').val((4*LengthA).toFixed(2));
        }
    }

    $('#ProductShapeId').change(calculateLenghtWidth);

</script>